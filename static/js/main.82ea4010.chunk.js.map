{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/ErrorBoundry.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","robot","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","ErrorBoundry","props","state","hasError","err","info","this","setState","children","Component","App","useState","setRobots","setSearchField","useEffect","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+MAeeA,EAbF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAEvB,OACG,yBAAKC,UAAU,uDACZ,yBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,QACpD,6BACG,4BAAKJ,GACL,2BAAIC,MCWDI,EAjBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACjB,OACG,6BACIA,EAAOC,KAAI,SAACC,EAAOC,GACjB,OACG,kBAAC,EAAD,CACGC,IAAKJ,EAAOG,GAAGV,GACfA,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCGpBU,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC/B,OACG,yBAAKX,UAAU,OACZ,2BACGA,UAAU,mCACVY,KAAK,SACLC,YAAY,sBACZC,SAAUH,M,4BCPDI,E,kDAClB,WAAYC,GAAQ,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACVC,UAAU,GAHG,E,8DAODC,EAAKC,GACpBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACL,0DAEHG,KAAKL,MAAMO,a,GAhBkBC,a,MCkE3BC,MA3Df,WAAe,MAUgBC,mBAAS,IAVzB,mBAULtB,EAVK,KAUGuB,EAVH,OAW0BD,mBAAS,IAXnC,mBAWLhB,EAXK,KAWQkB,EAXR,KAmBZC,qBAAW,WACRC,MAAM,8CACFC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAWP,EAAUO,QAG9B,IAIH,IAQSC,EAAiB/B,EAAOgC,QAAO,SAAC9B,GACnC,OAAOA,EAAMR,KAAKuC,cAAcC,SAAS5B,EAAY2B,kBAGxD,OAAQjC,EAAOmC,OAGZ,yBAAKvC,UAAU,UACZ,wBAAIA,UAAU,MAAd,eAGA,kBAAC,EAAD,CAAWW,aAnBG,SAAC6B,GAErBZ,EAAeY,EAAEC,OAAOC,UAmBf,kBAAC,EAAD,KACG,kBAAC,EAAD,CAAUtC,OAAQ+B,MAT3B,wBAAInC,UAAU,MAAd,eCvCW2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACN,kBAAC,IAAMC,WAAP,KACG,kBAAC,EAAD,OAEHC,SAASC,eAAe,SDwHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.82ea4010.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n   //    const { id, name, email } = props;\r\n   return (\r\n      <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n         <img src={`https://robohash.org/${id}?200x200`} alt=\"pic\" />\r\n         <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n   return (\r\n      <div>\r\n         {robots.map((robot, i) => {\r\n            return (\r\n               <Card\r\n                  key={robots[i].id}\r\n                  id={robots[i].id}\r\n                  name={robots[i].name}\r\n                  email={robots[i].email}\r\n               />\r\n            );\r\n         })}\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n   return (\r\n      <div className=\"pa2\">\r\n         <input\r\n            className=\"pa3 ba b--green bg-lightest-blue\"\r\n            type=\"search\"\r\n            placeholder=\"Robot Search Engine\"\r\n            onChange={searchChange}\r\n         />\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from 'react';\r\n\r\nexport default class ErrorBoundry extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         hasError: false,\r\n      };\r\n   }\r\n\r\n   componentDidCatch(err, info) {\r\n      this.setState({ hasError: true });\r\n   }\r\n\r\n   render() {\r\n      if (this.state.hasError) {\r\n         return <h1>Ooooops. That is not good.</h1>;\r\n      }\r\n      return this.props.children;\r\n   }\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\n// import Scroll from '../Components/Scroll';\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\n// import { robots } from './robots.js';\r\nimport './App.css';\r\n\r\n// export default class App extends Component \r\nfunction App() {\r\n\r\n   // constructor() {\r\n   //    super();\r\n   //    this.state = {\r\n   //       // robots: robots,\r\n   //       robots: [],\r\n   //       searchField: '',\r\n   //    };\r\n   // }\r\n   const [robots, setRobots] = useState([]) \r\n   const [searchField, setSearchField] = useState('')\r\n   // const [count, setCount] = useState(0)\r\n\r\n   // componentDidMount() {\r\n   //    fetch('https://jsonplaceholder.typicode.com/users')\r\n   //       .then((response) => response.json())\r\n   //       .then((users) => this.setState({ robots: users }));\r\n   // }\r\n   useEffect( () => {\r\n      fetch('https://jsonplaceholder.typicode.com/users')\r\n         .then((response) => response.json())\r\n         .then((users) => setRobots(users));\r\n         // console.log(count)\r\n   // }, [count]) // only run if count changes. it fetches again as well.\r\n   }, [])\r\n\r\n\r\n      // onSearchChange = (e) => \r\n   const onSearchChange = (e) => {\r\n      // this.setState({ searchField: e.target.value });\r\n      setSearchField(e.target.value)\r\n   };\r\n\r\n   // render() \r\n\r\n      // const { robots, searchField } = this.state;\r\n      const filteredRobots = robots.filter((robot) => {\r\n         return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n      });\r\n\r\n      return !robots.length ? (\r\n         <h1 className=\"tc\">Loading...</h1>\r\n      ) : (\r\n         <div className=\"tc mb5\">\r\n            <h1 className=\"f1\">RoboFriends</h1>\r\n            {/* <button onClick={() => setCount(count+1)}>Click Me!</button> */}\r\n        {/* <SearchBox searchChange={this.onSearchChange} /> */}\r\n            <SearchBox searchChange={onSearchChange} />\r\n            {/* <Scroll> */}\r\n               <ErrorBoundry>\r\n                  <CardList robots={filteredRobots} />\r\n               </ErrorBoundry>\r\n            {/* </Scroll> */}\r\n         </div>\r\n      );\r\n   \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(\r\n   <React.StrictMode>\r\n      <App />\r\n   </React.StrictMode>,\r\n   document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}